{
  "Navigation": {
    "dashboard": "Dashboard",
    "groups": "Groups",
    "nodes": "Nodes",
    "services": "Services",
    "templates": "Templates",
    "tasks": "Tasks",
    "users": "Users",
    "modules": "Modules",
    "players": "Players",
    "account": "Account",
    "logout": "Logout"
  },
  "Main": {
    "invalidJson": "Invalid JSON format.",
    "save": "Save",
    "edit": "Edit",
    "delete": "Delete",
    "create": "Create",
    "details": "Details",
    "goBack": "Go back",
    "refresh": "Refresh",
    "refreshing": "Refreshing...",
    "learnMore": "Learn more",
    "nothingFound": "Nothing found!",
    "noRecords": "It looks like there are no records to display.",
    "unauthorized": "Unauthorized",
    "noAccess": "You don't have the required permissions to access this page.",
    "maintenance": "Page is under maintenance!",
    "maintenanceDescription": "This page is not available at the moment. We'll be back online shortly.",
    "notFound": "{name} not found!",
    "notFoundDescription": "It looks like you're trying to access a {name} that doesn't exist."
  },
  "Auth": {
    "login": "Login",
    "loginDescription": "Enter your username below to login to your account",
    "address": "Address",
    "username": "Username",
    "password": "Password",
    "loginButton": "Login",
    "loginSuccess": "You have successfully logged in",
    "connectionError": "Can't connect to the server. Please check the address",
    "invalidCredentials": "Invalid username or password",
    "incorrectAddress": "Incorrect address!",
    "loginError": "An error occurred while logging in",
    "logoutError": "An error occurred while logging out"
  },
  "Home": {
    "registeredPlayers": "Registered Players",
    "nodeConsole": "Node Console",
    "view": "View"
  },
  "Groups": {
    "title": "Groups",
    "tableCaption": "A list of your groups.",
    "name": "Name",
    "groupNameChanged": "Group name has been changed!",
    "groupConfigUpdated": "Group config has been updated!",
    "groupUninstalled": "Group has been uninstalled!",
    "headsUp": "Heads up!",
    "editingGroupName": "Editing the 'name' field will not change the group name. Instead, it will create a new group with the new name."
  },
  "Modules": {
    "title": "Modules",
    "tableCaption": "A list of your modules.",
    "name": "Name",
    "author": "Author",
    "version": "Version",
    "lifecycle": "Lifecycle",
    "group": "Group",
    "description": "Description",
    "json": "JSON",
    "status": "Status",
    "start": "Start",
    "reload": "Reload",
    "stop": "Stop",
    "unload": "Unload",
    "uninstall": "Uninstall",
    "moduleConfigUpdated": "Module config updated successfully",
    "lifecycleUpdated": "Lifecycle updated successfully",
    "moduleUninstalled": "Module has been uninstalled"
  },
  "Nodes": {
    "title": "Nodes",
    "tableCaption": "A list of your nodes.",
    "name": "Name",
    "status": "Status",
    "memory": "Memory",
    "version": "Version",
    "cpuUsage": "CPU Usage",
    "nodeUsage": "Node Usage",
    "systemUsage": "System Usage",
    "usedMemory": "Used Memory",
    "maxMemory": "Max Memory",
    "servicesCount": "Amount of services",
    "currentServicesCount": "Current Services Count",
    "drainStatus": "Drain Status",
    "draining": "Draining",
    "notDraining": "Not Draining",
    "connectionDetails": "Connection details",
    "ip": "IP",
    "port": "Port",
    "nodeUpdated": "Node updated successfully",
    "updateFailed": "Failed to update node",
    "ipPortRequired": "IP and Port are required to update node"
  },
  "Players": {
    "title": "Players",
    "tableCaption": "A list of your online players.",
    "name": "Name",
    "downstreamService": "Downstream Service",
    "proxyService": "Proxy Service",
    "proxyNode": "Proxy Node",
    "firstLogin": "First time login",
    "lastLogin": "Last time login",
    "lastServer": "Last server",
    "editTitle": "Edit {playerName}",
    "lastNode": "Last Node",
    "labymodVersion": "Labymod version",
    "labymodCreationDate": "Labymod creation date",
    "unknown": "Unknown",
    "sendToService": "Send to Service",
    "sendChatMessage": "Send Chat Message",
    "executeCommand": "Execute Command",
    "kickPlayer": "Kick Player",
    "selectService": "Select Service",
    "enterServiceName": "Enter service name",
    "type": "Type",
    "selectType": "Select a type",
    "service": "Service",
    "task": "Task",
    "group": "Group",
    "serverSelector": "Server Selector",
    "lowestPlayers": "Lowest Players",
    "highestPlayers": "Highest Players",
    "random": "Random",
    "send": "Send",
    "playerSentToService": "Player sent to service",
    "playerSentToType": "Player sent to {type}",
    "sendPlayerToServer": "Send {playerName} to server",
    "confirmSendPlayer": "Are you sure you want to send {playerName} to a different server?",
    "messagePlayer": "Message {playerName}",
    "confirmMessagePlayer": "You are about to send a message to {playerName}",
    "message": "Message",
    "messageSent": "Message has been sent",
    "messageFailed": "Failed to send message",
    "kickPlayerTitle": "Kick {playerName}",
    "confirmKickPlayer": "Are you sure you want to kick {playerName}?",
    "kickReason": "Kick reason",
    "playerKicked": "Player has been kicked",
    "kickFailed": "Failed to kick player",
    "executeCommandTitle": "Execute command for {playerName}",
    "confirmExecuteCommand": "You are about to execute a command for {playerName}",
    "command": "Command",
    "proxyCommand": "Proxy command?",
    "commandExecuted": "Command has been executed",
    "commandFailed": "Failed to execute command",
    "true": "True",
    "false": "False",
    "details": "Details"
  },
  "Services": {
    "title": "Services",
    "tableCaption": "A list of your services.",
    "name": "Name",
    "state": "State",
    "cpuUsage": "CPU Usage",
    "ramUsage": "RAM Usage",
    "players": "Players",
    "details": "Details",
    "onlineCount": "{current} / {max}",
    "ramUsageFormat": "{used} / {max}",
    "configuration": "Configuration",
    "console": "Console",
    "memory": "Memory",
    "cpu": "CPU",
    "created": "Created",
    "version": "Version",
    "usedMemory": "Used Memory",
    "maxMemory": "Max Memory",
    "serviceCpuUsage": "Service CPU Usage",
    "createdAt": "Created at",
    "onlinePlayers": "Online Players",
    "maxPlayers": "Max Players",
    "viewOnly": "View only",
    "canEdit": "Can edit",
    "json": "JSON"
  },
  "Tasks": {
    "title": "Tasks",
    "tableCaption": "A list of your tasks.",
    "name": "Name",
    "maintenance": "Maintenance",
    "static": "Static",
    "edit": "Edit",
    "editTitle": "Edit {name}",
    "splitter": "Splitter",
    "isStatic": "Is Static",
    "minServiceCount": "Min. Service count",
    "startPort": "Start port",
    "maxMemory": "Max. Memory",
    "yes": "Yes",
    "no": "No",
    "deleteTask": "Delete task",
    "updateTask": "Update task",
    "deleteConfirmTitle": "Are you absolutely sure?",
    "deleteConfirmDescription": "This action cannot be undone. This will permanently delete your task and remove your data.",
    "cancel": "Cancel",
    "delete": "Delete",
    "headsUp": "Heads up!",
    "nameChangeWarning": "Editing the \"name\" field will not change the task name. Instead, it will create a new task with the new name.",
    "taskUpdated": "Task updated successfully",
    "updateFailed": "Failed to update task",
    "taskNameChanged": "Task name has been changed!",
    "json": "JSON"
  },
  "Users": {
    "title": "Users",
    "tableCaption": "A list of your users.",
    "name": "Name",
    "createdAt": "Created at",
    "modifiedAt": "Modified at",
    "editTitle": "Edit {username}",
    "username": "Username",
    "usernameDescription": "The username of the user",
    "password": "Password",
    "passwordDescription": "Enter a new password (leave empty to keep current password)",
    "passwordPlaceholder": "Enter password",
    "permissions": "Permissions / Scopes",
    "permissionsDescription": "Select the scopes for this user",
    "permissionsPlaceholder": "Select scopes...",
    "userUpdated": "User updated successfully",
    "updateFailed": "Failed to update user",
    "noPermissionUpdate": "No permission to update user",
    "userDeleted": "User deleted successfully",
    "deleteFailed": "Failed to delete user",
    "noPermissionDelete": "No permission to delete user"
  },
  "Permissions": {
    "globalAdmin": "Global Admin",
    "administrator": "Administrator",
    "readForRestUsers": "Read for Rest Users",
    "writeForRestUsers": "Write for Rest Users",
    "listForRestUsers": "List for Rest Users",
    "createNewRestUser": "Create a new rest user",
    "getInfoAboutRestUser": "Get info about rest user",
    "updatesExistingRestUser": "Updates existing rest user",
    "deleteRestUser": "Delete a rest user",
    "restUsers": "Rest users",
    "readForNodes": "Read for Nodes",
    "writeForNodes": "Write for Nodes",
    "nodeInfo": "Node info",
    "nodePing": "Node ping",
    "nodeLiveConsole": "Node Live console",
    "nodeReload": "Node reload",
    "getCurrentConfigurationOfNode": "Get the current configuration of node",
    "updatesConfigurationOfNode": "Updates the configuration of node",
    "node": "Node",
    "readForClusters": "Read for Clusters",
    "writeForClusters": "Write for Clusters",
    "listsAllNodes": "Lists all nodes",
    "updatesNode": "Updates a node",
    "createsNewNode": "Creates a new node",
    "getDetailInformationOfNode": "Get detail information of a specific node",
    "deletesNode": "Deletes a node",
    "sendsCommandToNode": "Sends a command to node",
    "cluster": "Cluster",
    "readForDatabases": "Read for Databases",
    "writeForDatabases": "Write for Databases",
    "listsAllDatabaseNames": "Lists all database names",
    "createNewDocumentInDatabase": "Create new document in database",
    "deleteDocumentsFromDatabase": "Delete documents from the database",
    "clearsDatabase": "Clears a database",
    "getKeysInDatabase": "Get keys in database",
    "getDocumentCountInDatabase": "Get document count in database",
    "checksDatabaseForKey": "Checks database for specific key",
    "getDocumentFromDatabase": "Get document from database",
    "findDocumentsInDatabase": "Find documents in database",
    "database": "Database",
    "readForGroups": "Read for groups",
    "writeForGroups": "Write for groups",
    "listsAllGroups": "Lists all groups",
    "createsOrUpdatesGroup": "Creates or updates a group",
    "getGroupConfiguration": "Get a group configuration",
    "deletesGroup": "Deletes a group",
    "groups": "Groups",
    "readForPlayers": "Read for Players",
    "writeForPlayers": "Write for Players",
    "getNumberOfPlayers": "Get number of players",
    "getListOfOnlinePlayers": "Get list of online players",
    "getPlayerByName": "Get player by name",
    "checksIfPlayerIsRegistered": "Checks if player is registered",
    "sendPlayerToService": "Send player to service",
    "connectPlayerToTaskOrGroup": "Connect player to task or group",
    "connectsPlayerToFallback": "Connects player to fallback",
    "kickPlayers": "Kick players",
    "sendChatMessageToPlayer": "Send chat message to player",
    "executesCommandForPlayer": "Executes command for player",
    "player": "Player",
    "readForTasks": "Read for tasks",
    "writeForTasks": "Write for tasks",
    "listsAllTasks": "Lists all tasks",
    "createsNewTask": "Creates a new task",
    "getServiceTask": "Get a service task",
    "deleteTask": "Delete a task",
    "tasks": "Tasks",
    "readForServices": "Read for Services",
    "writeForServices": "Write for Services",
    "listsAllServices": "Lists all services",
    "getService": "Get a service",
    "deleteService": "Delete a service",
    "deleteAllFilesOfService": "Delete all files of a service",
    "updatesLifecycleOfService": "Updates the lifecycle of a service",
    "includeTypeOfInclusion": "Include type of inclusion",
    "deploysAllWaitingDeployments": "Deploys all waiting deployments",
    "getCachedLogLines": "Get the cached log lines",
    "liveConsoleOfService": "Live console of service",
    "createNewServiceBasedOnConfig": "Create new service based on config",
    "createNewServiceBasedOnTask": "Create new service based on task",
    "createNewService": "Create new service",
    "addTemplateToService": "Add template to service",
    "addDeploymentToService": "Add deployment to service",
    "addInclusionToService": "Add inclusion to service",
    "executeCommandOnService": "Execute command on service",
    "service": "Service",
    "readTemplateStorages": "Read template storages",
    "showsTemplateStorages": "Shows template storages",
    "listTemplatesInTemplateStorages": "List templates in template storages",
    "templateStorage": "Template Storage",
    "readTemplates": "Read templates",
    "writeTemplates": "Write templates",
    "downloadFile": "Download a file",
    "getInformationAboutPath": "Get information about path",
    "checksIfFileFolderExists": "Checks if file/folder exists",
    "downloadTemplateAsZip": "Download template as zip",
    "checksIfTemplateExists": "Checks if template exists",
    "listsAllFilesInTemplate": "Lists all files in template",
    "createsNewTemplate": "Creates new template",
    "deployZipInTemplate": "Deploy zip in template",
    "createsOverridesFile": "Creates/Overrides a file",
    "appendContentToFile": "Append content to file",
    "createsDirectory": "Creates a directory",
    "deletesTemplate": "Deletes a template",
    "deleteFileOrDirectory": "Delete a file or directory",
    "templates": "Templates",
    "readServiceVersions": "Read service versions",
    "writeServiceVersions": "Write service versions",
    "listServiceVersions": "List service versions",
    "addServiceVersionType": "Add service version type",
    "listServiceEnvironments": "List service environments",
    "addNewServiceEnvironment": "Add new service environment",
    "getServiceVersion": "Get service version",
    "loadServiceVersionToServiceTemplate": "Load service version to service/template",
    "installServiceVersionToServiceTemplate": "Install service version to service/template",
    "serviceVersions": "Service Versions",
    "readForModules": "Read for Modules",
    "writeForModules": "Write for Modules",
    "reloadModules": "Reload modules",
    "getLoadedModules": "Get loaded modules",
    "getPresentModules": "Get present modules",
    "getModules": "Get modules",
    "getModuleInfo": "Get module info",
    "changeLifecycleOfModule": "Change lifecycle of module",
    "uninstallModule": "Uninstall module",
    "loadModule": "Load module",
    "installModule": "Install module",
    "getModuleConfiguration": "Get module configuration",
    "updateModuleConfiguration": "Update module configuration",
    "modules": "Modules"
  }
}